{"version":3,"sources":["components/axios.js","components/graphs.js","components/Cards.js","components/CovidDetails.js","App.js","reportWebVitals.js","index.js","components/Charts.module.css"],"names":["axiosInstant","axios","create","baseURL","Charts","props","className","styles","pie","data","labels","xCoordinate","map","e","substr","datasets","label","yCoordinate","fill","backgroundColor","borderColor","Cards","children","CovidDetails","style","textTransform","country","value","TotalRecovered","displayType","thousandSeparator","TotalConfirmed","Totaldeaths","App","useState","totalConfirmed","settotalConfirmed","totalDeaths","settotalDeaths","loading","setLoading","CovidDetail","setCovidDetail","setCountry","CasesCountx","setCasesCountx","CasesCounty","setCasesCounty","covidApiCaller","countrySlug","date","Date","get","getDate","then","res","console","log","d","Cases","usercase","Countries","find","Slug","TotalDeaths","catch","error","useEffect","status","Global","onChange","target","Country","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.85d366ec.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst axiosInstant = axios.create({\r\n    baseURL: 'https://api.covid19api.com/'\r\n})\r\n\r\nexport default axiosInstant;","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport styles from './Charts.module.css';\r\n\r\nconst Charts = (props) => {\r\n  return (\r\n    <>\r\n      <div className={styles.pie}>\r\n        <Line data={{\r\n          labels: props.xCoordinate.map(e => e.substr(0, 10)),\r\n          datasets: [\r\n            {\r\n              label: \"Covid-19 Cases\",\r\n              data: props.yCoordinate,\r\n              fill: true,\r\n              backgroundColor: \"rgba(75,192,192,0.2)\",\r\n              borderColor: \"rgba(75,192,192,1)\"\r\n            }\r\n          ]\r\n        }} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Charts;","import React from 'react'\r\n\r\nconst Cards = (props) => {\r\n    return (\r\n        <div className='Cards'>\r\n           {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n","import React from 'react'\r\nimport Cards from './Cards'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nexport default function CovidDetails(props) {\r\n    return (\r\n        <>\r\n        <h1 style={{textTransform: 'uppercase'}}>{props.country === '' ? 'World Covid Report' : props.country}</h1>\r\n        <div className='details'>\r\n            <Cards>\r\n                <h4>Total Recovered</h4>\r\n                <span><NumberFormat \r\n                    value={props.TotalRecovered} \r\n                    displayType={'text'}\r\n                    thousandSeparator={true}\r\n                ></NumberFormat></span>\r\n            </Cards>\r\n            <Cards>\r\n                <h4>Total Confirmed</h4>\r\n                <span><NumberFormat \r\n                    value={props.TotalConfirmed} \r\n                    displayType={'text'}\r\n                    thousandSeparator={true}\r\n                ></NumberFormat></span>\r\n            </Cards>\r\n            <Cards>\r\n                <h4>Total Deaths</h4>\r\n                <span><NumberFormat \r\n                    value={props.Totaldeaths} \r\n                    displayType={'text'}\r\n                    thousandSeparator={true}\r\n                ></NumberFormat></span>\r\n            </Cards>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\nimport axios from './components/axios';\nimport React, { useEffect, useState } from 'react'\nimport Charts from './components/graphs'\nimport CovidDetails from './components/CovidDetails';\n\nfunction App() {\n\n  // ALL STATES ARE DECLARED HERE \n  // const [totalRecovered, settotalRecovered] = useState(0);\n  const [totalConfirmed, settotalConfirmed] = useState(0);\n  const [totalDeaths, settotalDeaths] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [CovidDetail, setCovidDetail] = useState([]);\n  // const [days, setDays] = useState(7);\n  const [country, setCountry] = useState('');\n  const [CasesCountx, setCasesCountx] = useState([]);\n  const [CasesCounty, setCasesCounty] = useState([]);\n\n\n  // FUNCTION FOR FORMATTING DATE AS PER USER NEED\n  // const formatDate = (d) => {\n  //   const year = d.getFullYear();\n  //   const month = `0${d.getMonth() + 1}`.slice(-2);\n  //   const _date = d.getDate();\n\n  //   return `${year}-${month}-${_date}`\n  // }\n\n  // FUNCTION CALLED WHEN USER SELECTS COUNTRY\n  const countrySelector = (e) => {\n\n    setCountry(e.target.value)\n\n    // const _date = new Date();\n    // console.log(_date);\n    // const to = formatDate(_date);\n    // const from = formatDate(_date.setDate(_date.getDate() - days));\n\n    // console.log(from, to);\n\n    // THIS WILL AUTOMATICALLY CALL API FUNCTION SO THAT IT CAN UPDATE\n    covidApiCaller(e.target.value);\n  }\n\n  // FUNCTION WHEN USER WANTS TO KNOW AS PER DAYS\n  // const daySelector = (e) => {\n  //   setDays(e.target.value)\n\n  //   // const _date = new Date();\n  //   // const to = formatDate(_date);\n  //   // const from = formatDate(_date.setDate(_date.getDate() - days));\n\n  //   covidApiCaller(country);\n  // }\n\n\n  // MAIN FUNCTION \n  const covidApiCaller = (countrySlug) => {\n    // CALLING API\n    var date = new Date();\n    axios.get(`/country/${countrySlug}/status/confirmed?from=2020-04-01T00:00:00Z&to=${date.getDate}T00:00:00Z`)\n      .then(res => {\n        console.log(res);\n        const yCoordinate = res.data.map(d => d.Cases);\n        const xCoordinate = res.data.map(d => d.Date);\n        setCasesCounty(yCoordinate);\n        setCasesCountx(xCoordinate);\n\n        const usercase = CovidDetail.Countries.find(country => country.Slug === countrySlug)\n        // settotalRecovered(usercase.NewConfirmed);\n        settotalConfirmed(usercase.TotalConfirmed);\n        settotalDeaths(usercase.TotalDeaths);\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  useEffect(() => {\n    setLoading(true)\n    axios.get('/summary')\n      .then(res => {\n        setLoading(false)\n\n        if (res.status === 200) {\n          settotalConfirmed(res.data.Global.TotalConfirmed);\n          // settotalRecovered(res.data.Global.TotalRecovered);\n          settotalDeaths(res.data.Global.TotalDeaths);\n          setCovidDetail(res.data);\n        }\n        console.log(res);\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }, []);\n\n  if (loading) {\n    return <p>Fetching data is in loading...</p>\n  }\n\n  return (\n    <div className=\"App\">\n      <CovidDetails\n        TotalRecovered={totalConfirmed - totalDeaths}\n        TotalConfirmed={totalConfirmed}\n        Totaldeaths={totalDeaths}\n        country={country}\n      />\n      <div className=\"selectarea\">\n        <select style={{ textTransform: 'uppercase' }} value={country} onChange={countrySelector}>\n          <option value=\"\">Select Country</option>\n          {\n            CovidDetail.Countries && CovidDetail.Countries.map(country =>\n              <option value={country.Slug} key={country.Slug}>{country.Country}</option>\n            )\n          }\n        </select>\n        {/* <select value={days} onChange={daySelector}>\n        <option value=\"7\">A Week</option>\n        <option value=\"30\">A Month</option>\n        <option value=\"90\">Last 3 Months</option>\n      </select> */}\n      </div>\n      <Charts yCoordinate={CasesCounty} xCoordinate={CasesCountx} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pie\":\"Charts_pie__crfxJ\"};"],"sourceRoot":""}